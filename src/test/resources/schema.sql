DROP ALL OBJECTS;

CREATE TABLE IF NOT EXISTS funcionalidade (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    funcionalidade VARCHAR(255) NOT NULL,
    endpoint VARCHAR(255) NOT NULL,
    http_method VARCHAR(10) NOT NULL
);

CREATE TABLE IF NOT EXISTS funcao (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(50) NOT NULL,
    CONSTRAINT uk_funcao_nome UNIQUE (nome)
);

CREATE TABLE IF NOT EXISTS funcao_funcionalidade (
    funcao_id BIGINT NOT NULL,
    funcionalidade_id BIGINT NOT NULL,
    PRIMARY KEY (funcao_id, funcionalidade_id),
    CONSTRAINT fk_funcao_funcionalidade_funcao FOREIGN KEY (funcao_id) REFERENCES funcao (id) ON DELETE CASCADE,
    CONSTRAINT fk_funcao_funcionalidade_funcionalidade FOREIGN KEY (funcionalidade_id) REFERENCES funcionalidade (id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS usuario (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    senha VARCHAR(255) NOT NULL,
    ativo BOOLEAN,
    data_criacao TIMESTAMP,
    data_alteracao TIMESTAMP,
    administrador_id BIGINT,
    CONSTRAINT uk_usuario_email UNIQUE (email),
    FOREIGN KEY (administrador_id) REFERENCES usuario(id)
);

CREATE TABLE IF NOT EXISTS usuario_funcao (
    usuario_id BIGINT NOT NULL,
    funcao_id BIGINT NOT NULL,
    PRIMARY KEY (usuario_id, funcao_id),
    FOREIGN KEY (usuario_id) REFERENCES usuario(id) ON DELETE CASCADE,
    FOREIGN KEY (funcao_id) REFERENCES funcao(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS categoria_item (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS localizacao (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    andar VARCHAR(100) NOT NULL,
    nome_sala VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS status_item (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS tipo_entrada (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS item (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome_item VARCHAR(200) NOT NULL,
    descricao_curta VARCHAR(255),
    descricao_detalhada CLOB,
    numero_serie VARCHAR(100),
    codigo_item VARCHAR(100),
    CONSTRAINT uk_item_codigo UNIQUE (codigo_item),
    data_cadastro TIMESTAMP,
    data_alteracao TIMESTAMP,
    categoria_item_id BIGINT,
    localizacao_id BIGINT,
    status_item_id BIGINT,
    tipo_entrada_id BIGINT,
    nota_fiscal VARCHAR(255),
    CONSTRAINT fk_item_categoria FOREIGN KEY (categoria_item_id) REFERENCES categoria_item(id) ON DELETE SET NULL,
    CONSTRAINT fk_item_localizacao FOREIGN KEY (localizacao_id) REFERENCES localizacao(id) ON DELETE SET NULL,
    CONSTRAINT fk_item_status FOREIGN KEY (status_item_id) REFERENCES status_item(id) ON DELETE SET NULL,
    CONSTRAINT fk_item_tipo_entrada FOREIGN KEY (tipo_entrada_id) REFERENCES tipo_entrada(id) ON DELETE SET NULL
);

CREATE INDEX IF NOT EXISTS idx_usuario_email ON usuario(email);
CREATE INDEX IF NOT EXISTS idx_funcao_nome ON funcao(nome);
CREATE INDEX IF NOT EXISTS idx_funcionalidade_nome ON funcionalidade(funcionalidade);

-- Spring Batch Tables for PostgreSQL

CREATE TABLE BATCH_JOB_INSTANCE (
    JOB_INSTANCE_ID BIGINT PRIMARY KEY,
    VERSION BIGINT,
    JOB_NAME VARCHAR(100) NOT NULL,
    JOB_KEY VARCHAR(32) NOT NULL,
    CONSTRAINT JOB_INST_UN UNIQUE (JOB_NAME, JOB_KEY)
);

CREATE TABLE BATCH_JOB_EXECUTION (
    JOB_EXECUTION_ID BIGINT PRIMARY KEY,
    VERSION BIGINT,
    JOB_INSTANCE_ID BIGINT NOT NULL,
    CREATE_TIME TIMESTAMP NOT NULL,
    START_TIME TIMESTAMP DEFAULT NULL,
    END_TIME TIMESTAMP DEFAULT NULL,
    STATUS VARCHAR(10),
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE VARCHAR(2500),
    LAST_UPDATED TIMESTAMP,
    CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID)
        REFERENCES BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS (
    JOB_EXECUTION_ID BIGINT NOT NULL,
    PARAMETER_NAME VARCHAR(100) NOT NULL,
    PARAMETER_TYPE VARCHAR(100) NOT NULL,
    PARAMETER_VALUE VARCHAR(2500),
    IDENTIFYING CHAR(1) NOT NULL,
    CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID)
        REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID BIGINT PRIMARY KEY,
    VERSION BIGINT NOT NULL,
    STEP_NAME VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID BIGINT NOT NULL,
    CREATE_TIME TIMESTAMP NOT NULL,
    START_TIME TIMESTAMP DEFAULT NULL,
    END_TIME TIMESTAMP DEFAULT NULL,
    STATUS VARCHAR(10),
    COMMIT_COUNT BIGINT,
    READ_COUNT BIGINT,
    FILTER_COUNT BIGINT,
    WRITE_COUNT BIGINT,
    READ_SKIP_COUNT BIGINT,
    WRITE_SKIP_COUNT BIGINT,
    PROCESS_SKIP_COUNT BIGINT,
    ROLLBACK_COUNT BIGINT,
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE VARCHAR(2500),
    LAST_UPDATED TIMESTAMP,
    CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID)
        REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT (
    STEP_EXECUTION_ID BIGINT PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID)
        REFERENCES BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT (
    JOB_EXECUTION_ID BIGINT PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID)
        REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- Sequences
CREATE SEQUENCE BATCH_JOB_INSTANCE_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE BATCH_JOB_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE BATCH_JOB_EXECUTION_CONTEXT_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE BATCH_STEP_EXECUTION_CONTEXT_SEQ START WITH 1 INCREMENT BY 1;